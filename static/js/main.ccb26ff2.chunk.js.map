{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","jsonInput","setJsonInput","useState","response","setResponse","selectedOptions","setSelectedOptions","React","createElement","rows","cols","value","onChange","e","target","placeholder","onClick","async","parsedInput","JSON","parse","res","axios","post","data","error","console","alert","Select","isMulti","options","label","map","option","length","key","Array","isArray","join","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"sNA8EeA,MA1EHA,KACV,MAAOC,EAAWC,GAAgBC,mBAAS,KACpCC,EAAUC,GAAeF,mBAAS,OAClCG,EAAiBC,GAAsBJ,mBAAS,IA0CvD,OACEK,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,iBACJD,IAAAC,cAAA,YACEC,KAAK,IACLC,KAAK,KACLC,MAAOX,EACPY,SAAWC,GAAMZ,EAAaY,EAAEC,OAAOH,OACvCI,YAAY,gDAEdR,IAAAC,cAAA,WACAD,IAAAC,cAAA,UAAQQ,QAnDSC,UACnB,IACE,MAAMC,EAAcC,KAAKC,MAAMpB,GACzBqB,QAAYC,IAAMC,KAAK,6BAA8BL,GAC3Dd,EAAYiB,EAAIG,MAChB,MAAOC,GACPC,QAAQD,MAAM,SAAUA,GACxBE,MAAM,sCA4CyB,UAE9BxB,GACCI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,0BACJD,IAAAC,cAACoB,IAAM,CACLC,SAAO,EACPC,QA/CM,CACd,CAAEnB,MAAO,YAAaoB,MAAO,aAC7B,CAAEpB,MAAO,UAAWoB,MAAO,WAC3B,CAAEpB,MAAO,kBAAmBoB,MAAO,qBA6C3BnB,SAAUN,KAzCbH,EAGHI,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,UACGH,EAAgB2B,IAAIC,IACnB,MAAMtB,EAAQR,EAAS8B,EAAOtB,OAC9B,OAAIA,GAASA,EAAMuB,OAAS,EAExB3B,IAAAC,cAAA,MAAI2B,IAAKF,EAAOtB,OACdJ,IAAAC,cAAA,cAASyB,EAAOF,MAAM,KAAU,IAAEK,MAAMC,QAAQ1B,GAASA,EAAM2B,KAAK,MAAQ3B,GAI3E,SAfO,OCfX4B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAA7B,EAAA,GAAA8B,KAAAD,EAAAE,KAAA,UAAqBD,KAAKE,IAAiD,IAAhDC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAASL,EACpEC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHhD,IAAAC,cAACD,IAAMiD,WAAU,KACfjD,IAAAC,cAACT,EAAG,QAORwC","file":"static/js/main.ccb26ff2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Select from 'react-select';\r\n\r\nconst App = () => {\r\n  const [jsonInput, setJsonInput] = useState('');\r\n  const [response, setResponse] = useState(null);\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const parsedInput = JSON.parse(jsonInput);\r\n      const res = await axios.post('http://localhost:8080/bfhl', parsedInput);\r\n      setResponse(res.data);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      alert('Invalid JSON input or API error');\r\n    }\r\n  };\r\n\r\n  const options = [\r\n    { value: 'alphabets', label: 'Alphabets' },\r\n    { value: 'numbers', label: 'Numbers' },\r\n    { value: 'highestAlphabet', label: 'Highest Alphabet' }\r\n  ];\r\n\r\n  const renderResponse = () => {\r\n    if (!response) return null;\r\n  \r\n    return (\r\n      <div>\r\n        <h3>Response:</h3>\r\n        <ul>\r\n          {selectedOptions.map(option => {\r\n            const value = response[option.value];\r\n            if (value && value.length > 0) {\r\n              return (\r\n                <li key={option.value}>\r\n                  <strong>{option.label}:</strong> {Array.isArray(value) ? value.join(', ') : value}\r\n                </li>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>BFHL Frontend</h1>\r\n      <textarea\r\n        rows=\"6\"\r\n        cols=\"50\"\r\n        value={jsonInput}\r\n        onChange={(e) => setJsonInput(e.target.value)}\r\n        placeholder='Enter JSON like { \"data\": [\"A\", \"B\", \"C\"] }'\r\n      ></textarea>\r\n      <br />\r\n      <button onClick={handleSubmit}>Submit</button>\r\n\r\n      {response && (\r\n        <div>\r\n          <h3>Select Data to Display</h3>\r\n          <Select\r\n            isMulti\r\n            options={options}\r\n            onChange={setSelectedOptions}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {renderResponse()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}